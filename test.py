from openai import AsyncOpenAI
import os
import base64
import asyncio
from datetime import datetime, timedelta
from PIL import Image
from io import BytesIO

GLHF_TOKEN = os.getenv("GLHF_TOKEN")
client = AsyncOpenAI(api_key=GLHF_TOKEN, base_url="https://api.glhf.chat/v1")

def get_next_month_details():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    today = datetime.now()
    next_month_date = today.replace(day=1) + timedelta(days=32)
    last_day_of_month = next_month_date.replace(day=1) - timedelta(days=1)
    return {
        "month_name": next_month_date.strftime("%B %Y"),
        "days_in_month": last_day_of_month.day
    }

async def process_image(image_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with Image.open(image_path) as img:
            img = img.convert('RGB')
            img.thumbnail((1024, 1024))
            
            buffered = BytesIO()
            img.save(buffered, 
                     format="JPEG",
                     quality=90,
                     optimize=True,
                     progressive=True)
            
            return base64.b64encode(buffered.getvalue()).decode("utf-8")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

async def analyze_single_image(base64_img):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        response = await client.chat.completions.create(
            model="hf:meta-llama/Llama-3.2-11B-Vision-Instruct",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": (
                        "–í—ã–¥–µ–ª–∏ 7 –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.\n"
                        "–§–æ—Ä–º–∞—Ç:\n"
                        "1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–ó–Ω–∞—á–µ–Ω–∏–µ]\n"
                        "...\n"
                        "7. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–ó–Ω–∞—á–µ–Ω–∏–µ]"
                    )},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_img}"}}
                ]
            }],
            temperature=0.6,
            max_tokens=1500
        )
        return response.choices[0].message.content
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

async def generate_monthly_report(analyses, month_name, days_in_month):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        response = await client.chat.completions.create(
            model="hf:meta-llama/Llama-3.2-11B-Vision-Instruct",
            messages=[{
                "role": "user",
                "content": [{
                    "type": "text", 
                    "text": (
                        f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ {len(analyses)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\n"
                        + "\n\n".join(analyses) +
                        f"\n\n–°–æ–∑–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {month_name}:\n"
                        "1. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ 7 –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                        f"2. {days_in_month} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–∞—Ä—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "–î–µ–Ω—å [X]: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]"
                    )
                }]
            }],
            temperature=0.7,
            max_tokens=4000
        )
        return response.choices[0].message.content
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return None

async def main(image_paths):
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—è—Ü–µ
    month_details = get_next_month_details()
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    analyses = []
    for path in image_paths[:5]:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ {os.path.basename(path)}...")
        base64_img = await process_image(path)
        if base64_img:
            analysis = await analyze_single_image(base64_img)
            if analysis:
                analyses.append(analysis)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(analysis.splitlines())} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    if not analyses:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("\nüåÄ –°–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö...")
    report = await generate_monthly_report(
        analyses,
        month_details["month_name"],
        month_details["days_in_month"]
    )
    
    if report:
        return f"\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {month_details['month_name']}:\n\n{report}"
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    images = [
        'tests/photo_2025-04-23_20-32-50.jpg',
        'tests/photo_2025-04-23_20-33-03.jpg',
        'tests/photo_2025-04-23_20-33-19.jpg',
        'tests/photo_2025-04-23_20-33-39.jpg'
    ]
    
    result = asyncio.run(main(images))
    print(result)