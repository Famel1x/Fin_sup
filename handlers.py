from aiogram import Router, F
from aiogram.types import Message, PhotoSize
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from src.parsers.image_parser import parse_image
from src.services.forecast import forecast_by_boosting, format_for_forecast
from datetime import datetime

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
class UploadScreens(StatesGroup):
    waiting_for_months = State()
    collecting_screens = State()

user_screen_data = {}

@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–∞—Ç.")

@router.message(F.text == "/upload_session")
async def start_upload_session(message: Message, state: FSMContext):
    await message.answer("üìÖ –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—ã?")
    await state.set_state(UploadScreens.waiting_for_months)

@router.message(UploadScreens.waiting_for_months)
async def set_months(message: Message, state: FSMContext):
    try:
        months = int(message.text)
        user_screen_data[message.from_user.id] = {
            "months": months,
            "data": []
        }
        await message.answer(f"üì• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–π —Å–∫—Ä–∏–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months} –º–µ—Å—è—Ü–µ–≤. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /finish_upload")
        await state.set_state(UploadScreens.collecting_screens)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3, 5...)!")

@router.message(F.photo, UploadScreens.collecting_screens)
async def collect_photo(message: Message, bot, state: FSMContext):
    try:
        photo: PhotoSize = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        downloaded = await bot.download_file(file.file_path)

        with open("temp_image.png", "wb") as f:
            f.write(downloaded.read())

        extracted = parse_image("temp_image.png")
        if not extracted:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫—Ä–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.")
            return

        now = datetime.now()
        parsed_data = [
            {"timestamp": now, "amount": amt, "category": cat} for cat, amt in extracted
        ]

        user_screen_data[message.from_user.id]["data"].extend(parsed_data)
        await message.answer("üì∏ –°–∫—Ä–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∑–∏ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /finish_upload –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω–∞: {e}")

@router.message(F.text == "/finish_upload", UploadScreens.collecting_screens)
async def finish_upload(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_screen_data.get(user_id)

    if not user_data or not user_data["data"]:
        await message.answer("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Å–∫—Ä–∏–Ω—ã.")
        return

    try:
        formatted = format_for_forecast(user_data["data"])
        if not formatted:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—ã.")
            await state.clear()
            user_screen_data.pop(user_id, None)
            return

        forecast = forecast_by_boosting(formatted)

        valid_forecast = {cat: value for cat, value in forecast.items() if value is not None}
        if not valid_forecast:
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ó–∞–≥—Ä—É–∑–∏ –±–æ–ª—å—à–µ —Å–∫—Ä–∏–Ω–æ–≤ —Å —Ç—Ä–∞—Ç–∞–º–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏.")
            await state.clear()
            user_screen_data.pop(user_id, None)
            return

        total = sum(valid_forecast.values())

        text_lines = ["üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–∫—Ä–∏–Ω–∞–º:"]
        for cat, value in valid_forecast.items():
            text_lines.append(f"‚Ä¢ {cat}: {value:.2f} ‚ÇΩ")
        text_lines.append(f"\nüìà –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {total:.2f} ‚ÇΩ")

        await message.answer("\n".join(text_lines))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
    finally:
        await state.clear()
        user_screen_data.pop(user_id, None)
